# Default values for laravel.

nameOverride: ""
fullnameOverride: ""

replicaCount: 1

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Configure Laravel container.
laravel:
  image:
    repository: ""
    pullPolicy: IfNotPresent
    tag: ""

  existingConfigMap: ""

  envVariables: {}
    #  APP_NAME: "laravel"
    #  APP_ENV: "production"    

  env: []
  #  - name: FOO
  #    value: "bar"

  # The envWithTpl array below has the same usage as "env", but is using the tpl function to support templatable string.
  # This can be useful when you want to pass dynamic values to the Chart using the helm argument "--set <variable>=<value>"
  # https://helm.sh/docs/howto/charts_tips_and_tricks/#using-the-tpl-function
  envWithTpl: {}
  #  - name: FOO_2
  #    value: "{{ .Values.foo2 }}"
  #
  # foo2: bar2

  extraEnvFrom: []

  ## php-fpm.conf: additional PHP FPM config values
  # fpm: |
  #   pm.max_children = 120

  # Important! After this container has started, the PHP files
  # in our Docker image aren't in the shared volume. We need to 
  # get them into the shared volume. If we tried to write directly
  # to this volume from our Docker image the files wouldn't appear
  # in the nginx container.
  #
  # So, after the container has started, copy the PHP files from this
  # container's local filesystem (/app or /var/www/html -- added via the Docker image) 
  # to the shared volume, which is mounted at /usr/share/nginx/html.
  lifecycle:
    postStart:
      exec:
        command:
          - /bin/sh
          - -c
          - cp -r /var/www/html/. /usr/share/nginx/html

  livenessProbe: {}
  readinessProbe: {}


# Configure nginx container.
nginx:
  enabled: true

  image:
    repository: nginxinc/nginx-unprivileged
    pullPolicy: IfNotPresent
    tag: alpine

  service:
    type: NodePort
    port: 8080
  
  livenessProbe: {}
  readinessProbe: {}

  config:
    enabled: true
    name: "nginx-conf"

schedule:
  enabled: false
  # command:
  #   - php
  # args:
  #   - artisan
  #   - schedule:work 

updateStrategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 0
  #   maxUnavailable: 1

podAnnotations: {}

podSecurityContext: {}
#  runAsNonRoot: true
#  runAsUser: 1000
#  runAsGroup: 3000
#  fsGroup: 2000
#  fsGroupChangePolicy: "OnRootMismatch"
#  seccompProfile:
#    type: RuntimeDefault

securityContext: {}
#  allowPrivilegeEscalation: false
#  readOnlyRootFilesystem: false
#  capabilities:
#    drop:
#    - ALL

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 50m
  #   memory: 64Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

  ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#autoscaling-on-multiple-metrics-and-custom-metrics
  customRules: []
#     - type: Pods
#       pods:
#         metric:
#           name: packets-per-second
#         target:
#           type: AverageValue
#           averageValue: 1k
    ## see https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-configurable-scaling-behavior
  behavior: {}
#      scaleDown:
#        policies:
#          - type: Pods
#            value: 4
#            periodSeconds: 60
#          - type: Percent
#            value: 10
#            periodSeconds: 60


## only available if kind is Deployment
podDisruptionBudget:
  enabled: false
  annotations: {}
  maxUnavailable: "30%"

nodeSelector: {}

tolerations: []

affinity: {}

priorityClassName: ""

## How long (in seconds) a pod may take to exit (useful with lifecycle hooks to ensure lb deregistration is done)
##
terminationGracePeriodSeconds:

extraContainers: []
# Array mode
# initContainers:
#   - name: do-something
#     image: bitnami/kubectl:1.22
#     command: ['kubectl', 'version']

# String mode
# initContainers: |-
#   - name: do-something
#     image: bitnami/kubectl:{{ .Capabilities.KubeVersion.Major }}.{{ .Capabilities.KubeVersion.Minor }}
#     command: ['kubectl', 'version']
