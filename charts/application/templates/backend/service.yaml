{{- if and .Values.backend.enabled .Values.backend.service.enabled }}
{{- $global := .Values.global -}}
{{- $instance := .Values.backend.service -}}
{{- $instanceName := .Values.backend.name -}}
apiVersion: v1
kind: Service
metadata:
  {{- include "base.metadata" (dict "context" $ "global" $global "instanceName" $instanceName "instance" $instance ) | nindent 2 }}
spec:
{{- if and $instance.clusterIP (eq $instance.type "ClusterIP") }}
  clusterIP: {{ $instance.clusterIP }}
{{- end }}
{{- with $instance.externalIPs }}
  externalIPs: {{ . }}
{{- end }}
{{- if or (eq $instance.type "LoadBalancer") (eq $instance.type "NodePort") }}
  externalTrafficPolicy: {{ $instance.externalTrafficPolicy | quote }}
{{- end }}
{{- if eq $instance.type "LoadBalancer" }}
  {{- with $instance.loadBalancerClass }}
  loadBalancerClass: {{ . }}
  {{- end }}
  {{- with $instance.loadBalancerIP }}
  loadBalancerIP: {{ . }}
  {{- end }}
  {{- with $instance.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
  ports:
  - name: {{ $instance.servicePortName }}
    protocol: TCP
    port: {{ $instance.servicePort }}
    targetPort: http
    {{- if (and (or (eq $instance.type "NodePort") (eq $instance.type "LoadBalancer")) (not (empty $instance.nodePortHttp))) }}
    nodePort: {{ $instance.nodePortHttp }}
    {{- else if eq $instance.type "ClusterIP" }}
    nodePort: null
    {{- end }}
    {{- with $instance.servicePortHttpsAppProtocol }}
    appProtocol: {{ . }}
    {{- end }}
  {{- if $instance.additionalPorts }}
  {{ toYaml $instance.additionalPorts | indent 4 }}
  {{- end }}
  selector:
    {{- include "base.selectorLabels" (dict "context" $ "instanceName" $instanceName) | nindent 4 }}
  {{- if $instance.sessionAffinity }}
  sessionAffinity: {{ $instance.sessionAffinity }}
  {{- end }}
  type: {{ $instance.type }}

{{- end }}